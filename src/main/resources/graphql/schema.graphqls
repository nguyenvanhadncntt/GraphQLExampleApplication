scalar Date
scalar DateTime
scalar LocalDateTime

type Customer {
    id: ID,
    name: String,
    address: String,
    birthDate: Date,
    phoneNumber: String,
    orders: [Order]
}

type Product {
    id: ID,
    name: String,
    description: String,
    price: Float
}

type Order {
    id: ID,
    customerId: ID,
    customerName: String,
    total: Float,
    orderDate: LocalDateTime,
    orderProducts: [OrderProduct],
}

type OrderProduct {
    id: ID,
    productId: ID,
    productName: String,
    unitPrice: Float,
    totalProductPrice: Float,
    quantity: Int
}

type Query {
    getCustomers: [Customer]
    searchCustomers(name: String, page: Int!, size: Int!): [Customer]
    getProducts: [Product]
    getOrders: [Order]
}

input CustomerRequest {
    id: ID,
    name: String,
    address: String,
    birthDate: Date,
    phoneNumber: String
}

input ProductRequest {
    id: ID,
    name: String,
    description: String,
    price: Float
}

input OrderProductRequest {
    productId: ID!,
    quantity: Int!,
    unitPrice: Float!
}

input OrderRequest {
    customerId: ID!,
    orderProducts: [OrderProductRequest]!
}

type Mutation {
    createCustomer(customer: CustomerRequest!): Customer!
    deleteCustomer(id: ID): Boolean!
    createProduct(product: ProductRequest!): Product!
    placeOrder(order: OrderRequest!): Order!
}

type Subscription {
    getOrderPlaced: Order!
}